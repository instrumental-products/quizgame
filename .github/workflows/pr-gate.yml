name: PR gate (require approved discussion or open bug issue)

on:
  pull_request_target:
    types: [opened, edited, synchronize, reopened]

# Minimal permissions this job needs.
permissions:
  pull-requests: write     # to comment/close PRs
  issues: read             # to read issue state/labels
  discussions: read        # to read discussion labels
  contents: read

jobs:
  require-link:
    runs-on: ubuntu-latest

    steps:
      - name: Check PR links & labels
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const bodyPlusTitle = `${pr.title || ""}\n${pr.body || ""}`;

            // Collect refs of the form "#123"
            const hashRefs = [...bodyPlusTitle.matchAll(/#(\d+)/g)].map(m => Number(m[1]));

            // Collect refs from full URLs like ".../issues/123" or ".../discussions/123"
            const issueUrlRefs = [...bodyPlusTitle.matchAll(/\/issues\/(\d+)/g)].map(m => Number(m[1]));
            const discussionUrlRefs = [...bodyPlusTitle.matchAll(/\/discussions\/(\d+)/g)].map(m => Number(m[1]));

            // Merge de-duped refs; we’ll try both Issue and Discussion paths below
            const refs = Array.from(new Set([...hashRefs, ...issueUrlRefs, ...discussionUrlRefs]));

            if (refs.length === 0) {
              core.setFailed("No linked Issue/Discussion reference (e.g., Closes #123).");
              return;
            }

            const octo = github.getOctokit(process.env.GITHUB_TOKEN);
            let ok = false;

            // Try each referenced number as either an Issue or a Discussion
            for (const num of refs) {
              // Try as Issue
              try {
                const { data: issue } = await octo.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: num
                });
                // Ignore if this ref is actually a PR
                if (!issue.pull_request) {
                  const labels = (issue.labels || []).map(l => typeof l === 'string' ? l : l.name);
                  const isOpenBug = issue.state === 'open' && labels.includes('bug');
                  if (isOpenBug) { ok = true; break; }
                }
              } catch (e) {
                // Not an issue — fall through to discussion path
              }

              // Try as Discussion
              try {
                const { data: disc } = await octo.rest.discussions.getDiscussion({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  discussion_number: num
                });
                const labels = (disc.labels || []).map(l => l.name);
                if (labels.includes('approved')) { ok = true; break; }
              } catch (e) {
                // Not a discussion; continue
              }
            }

            if (!ok) {
              core.setFailed("No approved Discussion or open bug Issue found among linked refs.");
            }

      - name: Enforce PR template sections
        if: success() || failure()
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = (pr.body || "").toLowerCase();

            const hasSummary   = body.includes("## summary");
            const hasChecklist = body.includes("## checklist");
            const hasSteps     = body.includes("documented steps to test");

            if (!(hasSummary && hasChecklist && hasSteps)) {
              core.setFailed("PR template sections missing (Summary / Checklist / Steps to test).");
            }

      - name: Auto-close if requirements not met
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --repo ${{ github.repository }} \
            --body "$(cat <<'MSG'
          Thanks for the PR! To keep focus, we only review PRs that meet our requirements:

          • Link to an **open `bug` Issue** *or* a **Discussion** labeled **`approved`**.
          • Include required sections: **Summary**, **Checklist**, and **Documented steps to test**.
          • New feature PRs must originate from an **approved** Discussion.

          See CONTRIBUTING for details.
          Closing for now — happy to revisit once aligned. 🙏
          MSG
          )"

          gh pr close ${{ github.event.pull_request.number }} \
            --repo ${{ github.repository }}
